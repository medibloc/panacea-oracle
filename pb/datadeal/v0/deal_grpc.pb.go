// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: panacea_oracle/datadeal/v0/deal.proto

package v0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataDealServiceClient is the client API for DataDealService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataDealServiceClient interface {
	ValidateData(ctx context.Context, in *ValidateDataRequest, opts ...grpc.CallOption) (*ValidateDataResponse, error)
}

type dataDealServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataDealServiceClient(cc grpc.ClientConnInterface) DataDealServiceClient {
	return &dataDealServiceClient{cc}
}

func (c *dataDealServiceClient) ValidateData(ctx context.Context, in *ValidateDataRequest, opts ...grpc.CallOption) (*ValidateDataResponse, error) {
	out := new(ValidateDataResponse)
	err := c.cc.Invoke(ctx, "/panacea_oracle.datadeal.v0.DataDealService/ValidateData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataDealServiceServer is the server API for DataDealService service.
// All implementations must embed UnimplementedDataDealServiceServer
// for forward compatibility
type DataDealServiceServer interface {
	ValidateData(context.Context, *ValidateDataRequest) (*ValidateDataResponse, error)
	mustEmbedUnimplementedDataDealServiceServer()
}

// UnimplementedDataDealServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataDealServiceServer struct {
}

func (UnimplementedDataDealServiceServer) ValidateData(context.Context, *ValidateDataRequest) (*ValidateDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateData not implemented")
}
func (UnimplementedDataDealServiceServer) mustEmbedUnimplementedDataDealServiceServer() {}

// UnsafeDataDealServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataDealServiceServer will
// result in compilation errors.
type UnsafeDataDealServiceServer interface {
	mustEmbedUnimplementedDataDealServiceServer()
}

func RegisterDataDealServiceServer(s grpc.ServiceRegistrar, srv DataDealServiceServer) {
	s.RegisterService(&DataDealService_ServiceDesc, srv)
}

func _DataDealService_ValidateData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataDealServiceServer).ValidateData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea_oracle.datadeal.v0.DataDealService/ValidateData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataDealServiceServer).ValidateData(ctx, req.(*ValidateDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataDealService_ServiceDesc is the grpc.ServiceDesc for DataDealService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataDealService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "panacea_oracle.datadeal.v0.DataDealService",
	HandlerType: (*DataDealServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateData",
			Handler:    _DataDealService_ValidateData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "panacea_oracle/datadeal/v0/deal.proto",
}
